#!/bin/bash

################################################################################
# MIT License
# 
# Copyright (c) 2017 Directed Genomics
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
##################################################################################

set -euo pipefail

################################################################################
# Argument processing & setup
################################################################################

usage() {
  cat << EOF
Usage: $0 r1.fastq[.gz] umi-out.fastq[.gz]

Extracts UMI sequences from R1 (or R2) fastqs generated by recent versions of
Illumina bcl2fastq program that embed the UMIs in the read name instead of
creating an additional fastq file.

The input file may be optionally gzip compressed.  It must have read names that
look like the following:
    M00007:001:000000000-DG007:1:1101:15280:1718:AGCTCTAGCCAT 1:N:0:ACGTTGTA
    
Specifically the string before the first space must consist of 8 colon-separated
fields, with the UMI in the eigth field.

If the output filename ends in ".gz" it will be gzipped else an uncompressed
fastq file will be written.
EOF
}

if [[ ! $# -eq 2 ]]; then usage; echo; echo "Error: must provide exactly two arguments."; exit 1; fi

IN=$1
OUT=$2

if [[ ! -f $IN ]]; then usage; echo; echo "Error: input file $IN does not exist."; exit 1; fi

################################################################################
# Environment setup
################################################################################
P=`dirname $0`
source $P/common.sh
initialize

################################################################################
# Prepare the reference
################################################################################
case "$OUT" in
*.gz)
    GZIP="gzip -c"
    ;;
*)
    GZIP="cat"
    ;;
esac

# gunzip -f will pass through uncompressed files
gunzip -cf $IN | awk '{
    if (FNR % 4 == 1) {
        n = split($1, parts, ":")
        if (n < 8) {
            print "ERROR: Read", $1, "had fewer than 8 fields in the read name. Exiting." > "/dev/stderr"
            exit 1
        }
        umi = parts[8]
        if (umi !~ /^[ACGTN]+$/) {
            print "ERROR: Read" $1, "had non-ACGTN bases in the umi", umi ". Exiting." > "/dev/stderr"
            exit 2
        }
        
        print $1, $2
        print umi
        print "+"
        gsub(/./, "?", umi)
        print umi
    } 
}' | eval $GZIP > $OUT

banner "UMI Fastq Extraction Complete"
